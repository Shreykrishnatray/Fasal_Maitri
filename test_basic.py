#!/usr/bin/env python3
"""
Basic test script for Farmer AI Assistant core components
"""

import sys
import os
import logging

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_configuration():
    """Test configuration loading"""
    print("тЪЩя╕П Testing Configuration...")
    try:
        # Test basic config structure
        config_vars = {
            "TWILIO_ACCOUNT_SID": "ACf7af130b09bf922ff53a778a761693d3",
            "TWILIO_AUTH_TOKEN": "9beeb37b1b08ba34ce08d0326db9a2bb",
            "TWILIO_PHONE_NUMBER": "+12182199792",
            "PARAM_MODEL_PATH": "./models/param-1-2.9b-instruct",
            "DEVICE": "cpu",
            "VAKYANSH_STT_URL": "http://localhost:8001/stt",
            "VAKYANSH_TTS_URL": "http://localhost:8002/tts",
            "HOST": "0.0.0.0",
            "PORT": 8000,
            "DEBUG": True
        }
        
        print("тЬЕ Configuration structure is correct")
        print(f"тЬЕ Twilio Account SID: {config_vars['TWILIO_ACCOUNT_SID'][:10]}...")
        print(f"тЬЕ Twilio Phone Number: {config_vars['TWILIO_PHONE_NUMBER']}")
        print(f"тЬЕ AI Model Path: {config_vars['PARAM_MODEL_PATH']}")
        print(f"тЬЕ STT URL: {config_vars['VAKYANSH_STT_URL']}")
        print(f"тЬЕ TTS URL: {config_vars['VAKYANSH_TTS_URL']}")
        print(f"тЬЕ Server Host: {config_vars['HOST']}")
        print(f"тЬЕ Server Port: {config_vars['PORT']}")
        
        return True
    except Exception as e:
        print(f"тЭМ Configuration Error: {e}")
        return False

def test_context_extraction():
    """Test context extraction logic"""
    print("\nЁЯФН Testing Context Extraction...")
    try:
        # Simulate context extraction logic
        test_speech = "Haryana mein gehun ki kheti kar raha hun, paani ki kami hai"
        
        context = {
            'location': None,
            'crop': None,
            'water_condition': None,
            'soil_type': None,
            'season': None
        }
        
        # Simple keyword-based extraction
        text_lower = test_speech.lower()
        
        # Location extraction
        if "haryana" in text_lower:
            context['location'] = "рд╣рд░рд┐рдпрд╛рдгрд╛"
        
        # Crop extraction
        if "gehun" in text_lower or "wheat" in text_lower:
            context['crop'] = "wheat"
        elif "dhan" in text_lower or "rice" in text_lower:
            context['crop'] = "rice"
        elif "baajra" in text_lower or "millet" in text_lower:
            context['crop'] = "millet"
        
        # Water condition extraction
        if "paani ki kami" in text_lower or "water shortage" in text_lower:
            context['water_condition'] = "shortage"
        elif "paani bahut hai" in text_lower or "excess water" in text_lower:
            context['water_condition'] = "excess"
        elif "normal paani" in text_lower or "normal water" in text_lower:
            context['water_condition'] = "normal"
        
        print(f"тЬЕ Extracted Context: {context}")
        return True
    except Exception as e:
        print(f"тЭМ Context Extraction Error: {e}")
        return False

def test_multilingual_greetings():
    """Test multilingual greeting messages"""
    print("\nЁЯМН Testing Multilingual Greetings...")
    try:
        greetings = {
            "hindi": "рдирдорд╕реНрддреЗ! рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЦреЗрддреА рд╕реЗ рдЬреБрдбрд╝реА рдХреБрдЫ рдЬрд╛рдирдХрд╛рд░реА рджреЗрдВ рдЬреИрд╕реЗ рд▓реЛрдХреЗрд╢рди, рдлрд╕рд▓, рдкрд╛рдиреА рдХреА рд╕реНрдерд┐рддрд┐...",
            "english": "Hello! Please provide some information about your farming like location, crop, water condition...",
            "punjabi": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риХри┐ри░рикри╛ риХри░риХрйЗ риЖрикригрйА риЦрйЗридрйА римри╛ри░рйЗ риХрйБриЭ риЬри╛ригриХри╛ри░рйА рижри┐риУ риЬри┐ри╡рйЗриВ риЯри┐риХри╛ригри╛, рилри╕ри▓, рикри╛ригрйА рижрйА ри╕риери┐ридрйА...",
            "gujarati": "ркиркорк╕рлНркдрлЗ! ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдркорк╛рк░рлА ркЦрлЗркдрлА рк╡рк┐рк╢рлЗ ркХрлЗркЯрк▓рлАркХ ркорк╛рк╣рк┐ркдрлА ркЖрккрлЛ ркЬрлЗрко ркХрлЗ рк╕рлНркерк╛рки, рккрк╛ркХ, рккрк╛ркгрлАркирлА рк╕рлНркерк┐ркдрк┐...",
            "marathi": "рдирдорд╕реНрдХрд╛рд░! рдХреГрдкрдпрд╛ рддреБрдордЪреНрдпрд╛ рд╢реЗрддреАрдмрджреНрджрд▓ рдХрд╛рд╣реА рдорд╛рд╣рд┐рддреА рджреНрдпрд╛ рдЬрд╕реЗ рд╕реНрдерд╛рди, рдкреАрдХ, рдкрд╛рдгреНрдпрд╛рдЪреА рд╕реНрдерд┐рддреА...",
            "telugu": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Хр▒Кр░Вр░д р░╕р░ор░╛р░Ър░╛р░░р░В р░Зр░╡р▒Нр░╡р░Вр░бр░┐, р░Йр░жр░╛р░╣р░░р░гр░Хр▒Б р░╕р▒Нр░ер░╛р░ир░В, р░кр░Вр░Я, р░ир▒Ар░Яр░┐ р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐..."
        }
        
        for lang, greeting in greetings.items():
            print(f"тЬЕ {lang}: {greeting[:50]}...")
        
        return True
    except Exception as e:
        print(f"тЭМ Multilingual Greetings Error: {e}")
        return False

def test_query_prompts():
    """Test query prompt messages"""
    print("\nтЭУ Testing Query Prompts...")
    try:
        prompts = {
            "hindi": "рдЕрдм рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫрд┐рдПред",
            "english": "Now ask your question.",
            "punjabi": "ри╣рйБриг риЖрикригри╛ ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛред",
            "gujarati": "рк╣рк╡рлЗ ркдркорк╛рк░рлЛ рккрлНрк░рк╢рлНрки рккрлВркЫрлЛред",
            "marathi": "рдЖрддрд╛ рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛ред",
            "telugu": "р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐."
        }
        
        for lang, prompt in prompts.items():
            print(f"тЬЕ {lang}: {prompt}")
        
        return True
    except Exception as e:
        print(f"тЭМ Query Prompts Error: {e}")
        return False

def test_ai_prompt_structure():
    """Test AI prompt structure"""
    print("\nЁЯдЦ Testing AI Prompt Structure...")
    try:
        context = {
            'location': 'рд╣рд░рд┐рдпрд╛рдгрд╛',
            'crop': 'wheat',
            'water_condition': 'shortage',
            'soil_type': 'loamy',
            'season': 'rabi'
        }
        query = "рдкрд╛рдиреА рдХреА рдХрдореА рдореЗрдВ рдХреНрдпрд╛ рдХрд░реЗрдВ?"
        language = "hindi"
        
        # Build prompt structure
        lang_name = "рд╣рд┐рдВрджреА" if language == "hindi" else "English"
        
        prompt = f"""You are an expert agriculture advisor. Please respond in {lang_name}.
Farmer Location: {context.get('location', 'Unknown')}
Crop: {context.get('crop', 'Unknown')}
Water Condition: {context.get('water_condition', 'Unknown')}
Soil Type: {context.get('soil_type', 'Unknown')}
Season: {context.get('season', 'Unknown')}
Farmer Query: "{query}"
Give a clear, short, and practical answer in simple {lang_name} that a farmer can easily understand and follow. Focus on:
1. Immediate actionable steps
2. Cost-effective solutions
3. Local availability of resources
4. Safety precautions
Answer:"""
        
        print("тЬЕ AI Prompt Structure:")
        print(f"   - Language: {lang_name}")
        print(f"   - Location: {context['location']}")
        print(f"   - Crop: {context['crop']}")
        print(f"   - Water: {context['water_condition']}")
        print(f"   - Query: {query}")
        
        return True
    except Exception as e:
        print(f"тЭМ AI Prompt Structure Error: {e}")
        return False

def test_conversation_flow():
    """Test conversation flow logic"""
    print("\nЁЯФД Testing Conversation Flow...")
    try:
        # Simulate conversation stages
        stages = [
            "1. Farmer calls +12182199792",
            "2. System greets in Hindi",
            "3. Farmer provides farm details",
            "4. System extracts context",
            "5. System asks for query",
            "6. Farmer asks farming question",
            "7. AI generates contextual response",
            "8. System converts to speech",
            "9. Response played to farmer"
        ]
        
        for stage in stages:
            print(f"тЬЕ {stage}")
        
        return True
    except Exception as e:
        print(f"тЭМ Conversation Flow Error: {e}")
        return False

def main():
    """Run all basic tests"""
    print("ЁЯзк Starting Basic Farmer AI Assistant Tests")
    print("=" * 50)
    
    tests = [
        ("Configuration", test_configuration),
        ("Context Extraction", test_context_extraction),
        ("Multilingual Greetings", test_multilingual_greetings),
        ("Query Prompts", test_query_prompts),
        ("AI Prompt Structure", test_ai_prompt_structure),
        ("Conversation Flow", test_conversation_flow),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"тЭМ {test_name} failed with exception: {e}")
            results[test_name] = False
    
    print("\n" + "=" * 50)
    print("ЁЯУК Basic Test Results Summary:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "тЬЕ PASS" if result else "тЭМ FAIL"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nЁЯОп Overall: {passed}/{total} tests passed")
    
    if passed == total:
        print("ЁЯОЙ Core components are working! Ready for ML model integration.")
    else:
        print("тЪая╕П Some core components need attention.")
    
    print("\nЁЯУЛ Next Steps:")
    print("1. Install ML dependencies (transformers, torch)")
    print("2. Download Param-1-2.9B-Instruct model")
    print("3. Set up Vakyansh STT/TTS services")
    print("4. Deploy to cloud platform")
    print("5. Configure Twilio webhook")
    
    return passed == total

if __name__ == "__main__":
    main() 